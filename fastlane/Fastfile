# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do


  before_all do |lane, options|
    ensure_git_status_clean(show_uncommitted_changes: true)
  end


  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Bump version code and push"
  lane :bump_version_code_and_push do

    versionReleased = bump_version_code()

    git_commit(path: "./app/build.gradle", message: "Version Bump to " + versionReleased.to_s)

    push_to_git_remote()

  end

  desc "Release a build on Firebase Beta"
  lane :firebase_beta do
    
    versionReleased = bump_version_code()

    git_commit(path: "./app/build.gradle", message: "Version Bump to " + versionReleased.to_s)

    gradle(task: "clean assembleGreenstandDebug")

    firebase_app_distribution(
        app: "1:422699885542:android:993c29134938ce4d",
        testers: "zaven@greenstand.com, jay@greenstand.com",
        groups: "Greenstand",
        release_notes: "A new release!"
      )

    slack(message: "A new Greenstand Beta Build has been released on Firebase",
        default_payloads: ['git_branch'])

    slack(message: "A new Greenstand Beta Build has been released on Firebase",
        slack_url: ENV["SLACK_URL_QC"],
        payload: {
                     "Build Number" => versionReleased,
                   },
        default_payloads: ['git_branch'])


  end


  desc "Job for Travis to Submit a new Greenstand Beta Build to Crashlytics Beta"
  lane :beta_release do

    gradle(task: "clean assembleGreenstandDebug")
    crashlytics(groups: "all-testers")
  
    slack(message: "A new Greenstand Beta Build has been released on Fabric",
        default_payloads: ['git_branch'])

    slack(message: "A new Greenstand Beta Build has been released on Fabric",
        slack_url: ENV["SLACK_URL_QC"],
        payload: {
                     "Build Number" => versionReleased,
                   },
        default_payloads: ['git_branch'])

  end



  desc "Submit a new JustDigIt Beta Build to Crashlytics Beta"
  lane :justdiggit_beta do
  
    versionReleased = bump_version_code()

    git_commit(path: "./app/build.gradle", message: "Version Bump to " + versionReleased.to_s)

    gradle(task: "clean assembleJustdiggitDebug")
    crashlytics(groups: "all-testers")

    slack(message: "A new Justdiggit Beta Build has been released on Fabric",
        default_payloads: ['git_branch'])

    slack(message: "A new Justdiggit Beta Build has been released on Fabric",
        slack_url: ENV["SLACK_URL_QC"],
        payload: {
                     "Build Number" => versionReleased,
                   },
        default_payloads: ['git_branch'])
  
  end


  desc "Deploy a new version to the Google Play"
  lane :deploy do

    versionReleased = bump_version_code()

    git_commit(path: "./app/build.gradle", message: "Release to Play Store: Version Bump to " + versionReleased.to_s)

 #   add_git_tag()

    gradle(task: "clean assembleGreenstandRelease")
    upload_to_play_store

  end

  desc "Bump version code"
  lane :bump_version_code do
    path = '../app/build.gradle'
    re = /versionCode\s+(\d+)/

    s = File.read(path)
    versionCode = s[re, 1].to_i
    s[re, 1] = (versionCode + 1).to_s

    f = File.new(path, 'w')
    f.write(s)
    f.close

    versionCode += 1
  end
end

